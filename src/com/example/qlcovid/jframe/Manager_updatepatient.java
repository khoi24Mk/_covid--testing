/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.qlcovid.jframe;

import com.example.qlcovid.model.Hashing;
import com.example.qlcovid.model.ManagerDB;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
/**
 *
 * @author nhonnhon
 */
public class Manager_updatepatient extends javax.swing.JPanel {

    /**
     * Creates new form Manager_updatepatient
     */
    String ManagerID;
    ManagerDB db = new ManagerDB();
    JDialog d;
    DefaultComboBoxModel cbmodeltplace, cbmodelconditon;
    int tplaceindexincombobox;
    String treatmentid, conditionnow;
    Object[][] treatment, condition;
    String id, oldcondition, oldrelated;
    public Manager_updatepatient(String i, String mgID) throws SQLException{
        ManagerID = mgID;
        initComponents();
        id = i;
        initTreatment();
        initCondition();
        initDialog();
    }
    void initCondition() throws SQLException{
        conditionnow = db.get("Select condition from covid_patient where citizen_id = '" + id+"'");
        Vector<String> vt = new Vector<String>();
        if(conditionnow.equals("F0")){
            vt.add("No change");
            vt.add("Set related to");
            vt.add("Cured");
        }
        if(conditionnow.equals("F1")||conditionnow.equals("F2")||conditionnow.equals("F3")){
            vt.add("No change");
            vt.add("Change related");
            vt.add("Remove related");
        }
        cbmodelconditon = new DefaultComboBoxModel(vt);
        d3con.setModel(cbmodelconditon);
        d3con.setSelectedIndex(0);
        String relatedId = db.get("Select related_to from covid_patient where citizen_id = '" + id+"'");
        d2related.setText("");
        d2related.setEditable(false);
        oldcondition = conditionnow;
        oldrelated = relatedId;
        
        d3con.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                if(d3con.getSelectedIndex()== 1){
                    d2related.setText(oldrelated);
                    d2related.setEditable(true);
                }
                else {
                    d2related.setText("");
                    d2related.setEditable(false);
                }
            }
        });
    }
    void initTreatment() throws SQLException{
        treatmentid = db.get("Select treatment_place_id from covid_patient where citizen_id = '" + id+"'");
        treatment = db.getdata("select treatment_place_id, treatment_place_name from treatment_place where current_holding < capacity or treatment_place_id = " +id);
        Vector<String> vt = new Vector<String>();
        for(int i = 0; i<treatment.length; i++){
            if(treatment[i][0].toString().equals(treatmentid)) tplaceindexincombobox = i;
            vt.add(treatment[i][1].toString());
        }
        cbmodeltplace = new DefaultComboBoxModel(vt);
        d3place.setModel(cbmodeltplace);
        d3place.setSelectedIndex(tplaceindexincombobox);
    }
    void initDialog() throws SQLException{
        String name = db.get("Select full_name from covid_patient where citizen_id = '" + id+"'");
        d2id.setText(id);
        d2id.setEditable(false);
        d = new JDialog();
        d.setSize(360, 220);
        d.add(this);
        d.setResizable(false);
        d.setModal(true);
        d.setLocationRelativeTo(null);
        d.setTitle("Update patient "+ name + " ("+id+")");
        d.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        textlabel = new javax.swing.JLabel();
        d2id = new javax.swing.JTextField();
        d3con = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        d3place = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        d2update = new javax.swing.JButton();
        d2related = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        jPanel3.setBackground(new java.awt.Color(0, 255, 255));

        textlabel.setBackground(java.awt.Color.white);
        textlabel.setForeground(new java.awt.Color(102, 102, 102));
        textlabel.setText("Citizen ID");

        d2id.setBackground(java.awt.Color.white);
        d2id.setForeground(new java.awt.Color(102, 102, 102));

        d3con.setBackground(java.awt.Color.white);
        d3con.setForeground(new java.awt.Color(102, 102, 102));
        d3con.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setBackground(java.awt.Color.white);
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Change case");

        d3place.setBackground(java.awt.Color.white);
        d3place.setForeground(new java.awt.Color(102, 102, 102));
        d3place.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel17.setBackground(java.awt.Color.white);
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Treatment place");

        d2update.setBackground(new java.awt.Color(51, 51, 51));
        d2update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        d2update.setForeground(new java.awt.Color(255, 255, 255));
        d2update.setText("Update");
        d2update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                d2updateMouseClicked(evt);
            }
        });

        d2related.setBackground(java.awt.Color.white);
        d2related.setForeground(new java.awt.Color(102, 102, 102));

        jLabel15.setBackground(java.awt.Color.white);
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Related Id");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(textlabel))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(d3place, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(d2id)
                    .addComponent(d2related)
                    .addComponent(d3con, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(d2update, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textlabel)
                    .addComponent(d2id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(d3place, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(d3con, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(d2related, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addComponent(d2update, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void d2updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_d2updateMouseClicked
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Enter your password:");
        JPasswordField pass = new JPasswordField(10);
        panel.add(label);
        panel.add(pass);
        String[] options = new String[]{"OK", "Cancel"};
        int option = JOptionPane.showOptionDialog(null, panel, "Confirm password",
                                 JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                                 null, options, options[1]);
        if(option == 0) // pressing OK button
        {
            try {
				if(db.count("select count(username) from ql_user where user_role = 'supevisor' and username = '"+ ManagerID + "' and user_password = '" + Hashing.getHash(pass.getText().toString())+"'")==1){
				}
				else{
				    JOptionPane.showMessageDialog(null, "Wrong password!!");
				    return;
				}
			} catch (HeadlessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        else{
            return;
        }
                
        String newtreatmentid = treatment[d3place.getSelectedIndex()][0].toString();
        if(!newtreatmentid.equals(treatmentid)){
            
            try {
                String newqr = " update covid_patient set treatment_place_id = '" + newtreatmentid +"' where citizen_id = '" +id+"'";
                newqr += " update treatment_place set current_holding = current_holding + 1 where treatment_place_id = '" +newtreatmentid+"'";
                newqr += " update treatment_place set current_holding = current_holding - 1 where treatment_place_id = '" +treatmentid+"'";
                db.insert(newqr);
                String query = "INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ ManagerID + "', 'change treatment place "+id+"', GETDATE())";
                db.insert(query);
            } catch (SQLException ex) {
                Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String newcondition = d3con.getSelectedItem().toString();
        if(d3con.getSelectedIndex()!=0){
            if("F0".equals(oldcondition)){
                if(d3con.getSelectedIndex()==1){//change related : change all people related to
                    if(d2related.getText().isEmpty() || d2related.getText().length()==0){
                        try {
							setF0(id);
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
                    }
                    else{
                        String relatedid = d2related.getText();
                        String relatedcondition;
						try {
							relatedcondition = db.get("select condition from covid_patient where citizen_id = '" + relatedid+"'");
							if(relatedcondition.equals("F0")){
	                            setF1(id);
	                        }
	                        else if(relatedcondition.equals("F1")){
	                            setF2(id);
	                        }
	                        else if(relatedcondition.equals("F2")){
	                            setF3(id);
	                        }
	                        else{
	                            d2related.setText("Unexisted ID!");
	                        }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
                        
                    }
                }
                if(d3con.getSelectedIndex()==2){//cured
                    String newqr = " update treatment_place set current_holding = current_holding - 1 where treatment_place_id = '" +treatmentid+"'";
                    newqr += " update covid_patient set condition = null, treatment_place_id = null where citizen_id = '" +id+"'";
                    newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+id+"', 'cured', GETDATE()) ";
                    newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'cured "+id+"', GETDATE()) ";
                    try {
                        db.insert(newqr);
                    } catch (SQLException ex) {
                        Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else{
                if(d3con.getSelectedIndex()==1){//change related : change all people related to
                    if(d2related.getText().isEmpty() || d2related.getText().length()==0){
                        try {
							setF0(id);
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
                    }
                    else{
                        String relatedid = d2related.getText();
                        String newqr = " update covid_patient set related_to = '"+ relatedid +"' where citizen_id = " + id;
                        try {
                            db.insert(newqr);
                        } catch (SQLException ex) {
                            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String relatedcondition;
						try {
							relatedcondition = db.get("select condition from covid_patient where citizen_id = " + relatedid);
							 if(relatedcondition.equals("F0")){
		                            setF1(id);
		                        }
		                        else if(relatedcondition.equals("F1")){
		                            setF2(id);
		                        }
		                        else if(relatedcondition.equals("F2")){
		                            setF3(id);
		                        }
		                        else{
		                            d2related.setText("Unexisted ID!");
		                        }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
                    }
                }
                if(d3con.getSelectedIndex()==2){try {
                    //remove related : remove all people related to
                    removepatient(id);
                    } catch (SQLException ex) {
                        Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        System.out.println(newcondition);
        JOptionPane.showMessageDialog(null, "Update patient successfully!");
        d.setVisible(false);
    }//GEN-LAST:event_d2updateMouseClicked
    
    void removepatient(String thisid) throws SQLException{
        String tid = db.get("select treatment_place_id from covid_patient where citizen_id = '" + thisid+"'");
        String newqr = " update treatment_place set current_holding = current_holding - 1 where treatment_place_id = '" +tid+"'";
        newqr += " update covid_patient set condition = null, treatment_place_id = null where citizen_id = " +thisid;
        newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+thisid+"', 'removerelated', GETDATE()) ";
        newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'removerelated "+id+"', GETDATE()) ";
        try {
            db.insert(newqr);
        } catch (SQLException ex) {
            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] ob = db.getdata("select citizen_id from covid_patient where related_to = '" + thisid+"'");
        for(int i=0; i<ob.length; i++){
            removepatient(ob[i][0].toString());
        }
    }
    void setF0(String thisid) throws SQLException{
        String newqr = " update covid_patient set condition = 'F0', related_to = null where citizen_id = " + thisid;
        newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+thisid+"', 'toF0', GETDATE()) ";
        newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'toF0 "+id+"', GETDATE()) ";
        try {
            db.insert(newqr);
        } catch (SQLException ex) {
            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] ob = db.getdata("select citizen_id from covid_patient where related_to = '" + thisid+"'");
        for(int i=0; i<ob.length; i++){
            setF1(ob[i][0].toString());
        }
    }
    void setF1(String thisid) throws SQLException{
        String newqr = " update covid_patient set condition = 'F1' where citizen_id = '" + thisid+"'";
        newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+thisid+"', 'toF1', GETDATE()) ";
        newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'toF1 "+id+"', GETDATE()) ";
        try {
            db.insert(newqr);
        } catch (SQLException ex) {
            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] ob = db.getdata("select citizen_id from covid_patient where related_to = '" + thisid+"'");
        for(int i=0; i<ob.length; i++){
            setF2(ob[i][0].toString());
        }
    }
    void setF2(String thisid) throws SQLException{
        String newqr = " update covid_patient set condition = 'F2' where citizen_id = '" + thisid+"'";
        newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+thisid+"', 'toF2', GETDATE()) ";
        newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'toF2 "+id+"', GETDATE()) ";
        try {
            db.insert(newqr);
        } catch (SQLException ex) {
            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] ob = db.getdata("select citizen_id from covid_patient where related_to = '" + thisid+"'");
        for(int i=0; i<ob.length; i++){
            setF3(ob[i][0].toString());
        }
    }
    void setF3(String thisid) throws SQLException{
        String newqr = " update covid_patient set condition = 'F3' where citizen_id = '" + thisid+"'";
        newqr += " INSERT INTO patient_history(patient_id, patient_action, patient_date) VALUES('"+thisid+"', 'toF3', GETDATE()) ";
        newqr += " INSERT INTO edit(supevisor_id, supevisor_action, supevisor_date) VALUES('"+ManagerID+"', 'toF3 "+id+"', GETDATE()) ";
        try {
            db.insert(newqr);
        } catch (SQLException ex) {
            Logger.getLogger(Manager_updatepatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object[][] ob = db.getdata("select citizen_id from covid_patient where related_to = '" + thisid+"'");
        for(int i=0; i<ob.length; i++){
            removepatient(ob[i][0].toString());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField d2id;
    private javax.swing.JTextField d2related;
    private javax.swing.JButton d2update;
    private javax.swing.JComboBox<String> d3con;
    private javax.swing.JComboBox<String> d3place;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel textlabel;
    // End of variables declaration//GEN-END:variables
}
